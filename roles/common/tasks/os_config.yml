- name: Ensure Homebrew is installed
  stat:
    path: /opt/homebrew/bin/brew
  register: homebrew_check

- name: Install Homebrew (if missing)
  shell: |
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  when: not homebrew_check.stat.exists

- name: Install MesloLGS NF fonts to user fonts directory
  copy:
    src: "fonts/MesloLGS NF/{{ item | basename }}"
    dest: "{{ ansible_env.HOME }}/Library/Fonts/{{ item | basename }}"
    mode: '0644'
  with_fileglob:
    - "fonts/MesloLGS NF/*.ttf"

- name: Install Oh My Zsh
  shell: |
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  args:
    creates: ~/.oh-my-zsh

- name: Clone zsh-syntax-highlighting plugin
  git:
    repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
    dest: "{{ lookup('env','ZSH_CUSTOM') | default(ansible_env.HOME + '/.oh-my-zsh/custom', true) }}/plugins/zsh-syntax-highlighting"
    update: no

- name: Clone zsh-autosuggestions plugin
  git:
    repo: https://github.com/zsh-users/zsh-autosuggestions.git
    dest: "{{ lookup('env','ZSH_CUSTOM') | default(ansible_env.HOME + '/.oh-my-zsh/custom', true) }}/plugins/zsh-autosuggestions"
    update: no

- name: Clone zsh-completions plugin
  git:
    repo: https://github.com/zsh-users/zsh-completions.git
    dest: "{{ lookup('env','ZSH_CUSTOM') | default(ansible_env.HOME + '/.oh-my-zsh/custom', true) }}/plugins/zsh-completions"
    update: no

- name: Configure minimal ~/.zshrc for Oh My Zsh and plugins
  copy:
    dest: ~/.zshrc
    mode: '0644'
    force: true
    backup: true
    content: |
      export ZSH="$HOME/.oh-my-zsh"
      ZSH_THEME="agnoster"
      plugins=(git zsh-autosuggestions zsh-completions zsh-syntax-highlighting)
      fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src
      autoload -U compinit && compinit
      source "$ZSH/oh-my-zsh.sh"
      export PATH="$HOME/development/flutter/bin:$PATH"

- name: Set global git user.name
  community.general.git_config:
    name: user.name
    value: "{{ git_user_name }}"
    scope: global

- name: Set global git user.email
  community.general.git_config:
    name: user.email
    value: "{{ git_user_email }}"
    scope: global

- name: Check if SSH key exists
  stat:
    path: "{{ ssh_key_path }}"
  register: ssh_key

- name: Generate SSH key if not exists
  command: ssh-keygen -t ed25519 -C "{{ git_user_email }}" -f {{ ssh_key_path }} -N ""
  args:
    creates: "{{ ssh_key_path }}"
  when: not ssh_key.stat.exists

- name: Start ssh-agent
  shell: |
    eval "$(ssh-agent -s)"
  environment:
    SSH_AUTH_SOCK: "{{ lookup('env', 'SSH_AUTH_SOCK') | default('') }}"
  changed_when: false

- name: Add SSH key to ssh-agent (macOS)
  shell: |
    ssh-add --apple-use-keychain {{ ssh_key_path }} || ssh-add {{ ssh_key_path }}
  environment:
    SSH_AUTH_SOCK: "{{ lookup('env', 'SSH_AUTH_SOCK') | default('') }}"
  args:
    executable: /bin/bash

- name: Ensure ~/.ssh directory exists
  file:
    path: "~/.ssh"
    state: directory
    mode: '0700'

- name: Configure ~/.ssh/config file (GitHub recommended)
  copy:
    dest: "~/.ssh/config"
    mode: '0600'
    content: |
      Host github.com
        HostName github.com
        User git
        IdentityFile {{ ssh_key_path }}
        AddKeysToAgent yes
        UseKeychain yes

- name: Ensure GnuPG and pinentry-mac are installed
  community.general.homebrew:
    name:
      - gnupg
      - pinentry-mac
    state: present
  when: homebrew_check.stat.exists

- name: Ensure ~/.gnupg directory exists
  file:
    path: "{{ ansible_env.HOME }}/.gnupg"
    state: directory
    mode: '0700'

- name: Detect pinentry-mac path
  shell: |
    command -v pinentry-mac || echo "/opt/homebrew/bin/pinentry-mac"
  register: pinentry_path
  changed_when: false
  args:
    executable: /bin/bash

- name: Configure pinentry-program in gpg-agent.conf
  lineinfile:
    path: "{{ ansible_env.HOME }}/.gnupg/gpg-agent.conf"
    create: true
    mode: '0600'
    regexp: '^pinentry-program '
    line: "pinentry-program {{ pinentry_path.stdout }}"

- name: Restart gpg-agent
  shell: |
    gpgconf --kill gpg-agent || true
    gpgconf --launch gpg-agent || true
  changed_when: false

- name: Detect gpg binary path
  shell: |
    command -v gpg || echo "/opt/homebrew/bin/gpg"
  register: gpg_path
  changed_when: false
  args:
    executable: /bin/bash

- name: Check for existing secret key for user email
  shell: |
    gpg --list-secret-keys --keyid-format=long "{{ git_user_email }}" 2>/dev/null | awk '/^sec/ {print $2}' | tail -n1 | cut -d'/' -f2
  register: existing_key_id
  changed_when: false
  args:
    executable: /bin/bash

- name: Generate GPG key (non-interactive) if missing
  shell: |
    gpg --batch --quick-generate-key "{{ git_user_name }} <{{ git_user_email }}>" ed25519 sign 0
  when: existing_key_id.stdout | trim == ''

- name: Read (latest) GPG key id
  shell: |
    gpg --list-secret-keys --keyid-format=long "{{ git_user_email }}" 2>/dev/null | awk '/^sec/ {print $2}' | tail -n1 | cut -d'/' -f2
  register: gpg_key_id
  changed_when: false
  args:
    executable: /bin/bash

- name: Configure git to use gpg program
  community.general.git_config:
    name: gpg.program
    value: "{{ gpg_path.stdout | default('/opt/homebrew/bin/gpg') }}"
    scope: global

- name: Configure git signing key
  community.general.git_config:
    name: user.signingkey
    value: "{{ gpg_key_id.stdout | trim }}"
    scope: global
  when: gpg_key_id.stdout | trim != ''

- name: Enable git commit signing
  community.general.git_config:
    name: commit.gpgsign
    value: 'true'
    scope: global

- name: Enable git tag signing
  community.general.git_config:
    name: tag.gpgSign
    value: 'true'
    scope: global

- name: Export ASCII-armored public key to file
  shell: |
    gpg --armor --export "{{ gpg_key_id.stdout | trim }}" > "{{ ansible_env.HOME }}/.gnupg/{{ gpg_key_id.stdout | trim }}.asc"
  args:
    executable: /bin/bash
  when: gpg_key_id.stdout | trim != ''
  creates: "{{ ansible_env.HOME }}/.gnupg/{{ gpg_key_id.stdout | trim }}.asc"
