# roles/common/tasks/main.yml

- name: Agreement Xcode license
  become: true
  command: sudo xcodebuild -license accept
  ignore_errors: true

- name: Switch Xcode path
  become: true
  command: sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
  ignore_errors: true

- name: Run Xcode first launch setup
  become: true
  command: sudo xcodebuild -runFirstLaunch
  ignore_errors: true

- name: Install CocoaPods
  homebrew:
    name: cocoapods
    state: present

- name: Ensure development directory exists
  file:
    path: "{{ ansible_env.HOME }}/development"
    state: directory
    mode: '0755'

- name: Download Flutter SDK zip
  get_url:
    url: https://storage.googleapis.com/flutter_infra_release/releases/stable/macos/flutter_macos_arm64_3.29.3-stable.zip
    dest: "{{ ansible_env.HOME }}/development/flutter.zip"
    mode: '0644'

- name: Unarchive Flutter SDK
  unarchive:
    src: "{{ ansible_env.HOME }}/development/flutter.zip"
    dest: "{{ ansible_env.HOME }}/development/"
    remote_src: yes
    creates: "{{ ansible_env.HOME }}/development/flutter/bin/flutter"

- name: Add Flutter to PATH in .zshrc
  lineinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    line: 'export PATH="$HOME/development/flutter/bin:$PATH"'
    create: yes

- name: Run flutter doctor to initialize
  shell: "{{ ansible_env.HOME }}/development/flutter/bin/flutter doctor"
  environment:
    PATH: "{{ ansible_env.HOME }}/development/flutter/bin:{{ ansible_env.PATH }}"

- name: Tap FVM formula
  homebrew_tap:
    name: leoafarias/fvm
    state: present

- name: Install Homebrew packages
  homebrew:
    name: "{{ item }}"
    state: present
  loop:
    - fvm
    - nvm
    - pyenv
    - pyenv-virtualenv
    - poetry
    - awscli
    - nginx
    - bison

- name: Install Homebrew cask applications
  homebrew_cask:
    name: "{{ item }}"
    state: present
  loop:
    - google-chrome
    - iterm2
    - visual-studio-code
    - sourcetree
    - dbeaver-community
    - intellij-idea
    - goland
    - pycharm
    - android-studio
    - 1password
    - postman
    - mysqlworkbench
    - lens
    - mweb-pro
    - anydesk
    - wechat
    - wechatwork
    - telegram
    - slack
    - lark
    - feishu
    - resilio-sync
    - whatsapp
    - chatgpt
    - claude
    - ollama
    - transocks
    - windsurf
    - cursor
    - grammarly-desktop
    - microsoft-edge
    - arc
    - notion
    - vlc
    - neteasemusic
    - pgadmin4
    - android-file-transfer
    - tencent-meeting
    - docker
    - zoom
    - microsoft-teams
    - microsoft-office
    - teamviewer
    - adobe-creative-cloud

- name: Create .nvm directory
  file:
    path: "{{ ansible_env.HOME }}/.nvm"
    state: directory
    mode: '0755'

- name: Add NVM configuration to .zshrc
  blockinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    block: |
      export NVM_DIR="$HOME/.nvm"
      [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
      [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
    create: yes

# ==== Go & GVM 自动化安装 ====
- name: 检查 gvm 是否已安装
  stat:
    path: "{{ ansible_env.HOME }}/.gvm/bin/gvm"
  register: gvm_stat

- name: 安装 gvm（Go Version Manager）
  shell: bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)
  args:
    executable: /bin/bash
  when: not gvm_stat.stat.exists

- name: 安装 go（gvm 依赖，后续会卸载）
  homebrew:
    name: go
    state: present

- name: 初始化 gvm 环境变量
  lineinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    line: '[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"'
    create: yes

- name: 用 gvm 安装 go1.21 和 go1.22，并设 go1.22 为默认
  shell: |
    source "$HOME/.gvm/scripts/gvm"
    gvm install go1.21
    gvm install go1.22
    gvm use go1.22 --default
  args:
    executable: /bin/bash
  environment:
    GVM_NO_UPDATE_PROFILE: '1'
  when: gvm_stat.stat.exists

- name: 卸载 brew 安装的 go
  homebrew:
    name: go
    state: absent

- name: Install Rosetta 2
  become: true
  command: sudo softwareupdate --install-rosetta --agree-to-license
  ignore_errors: true